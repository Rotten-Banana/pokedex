{"version":3,"sources":["card.js","searchbox.js","pokedata.js","app.js","serviceWorker.js","index.js"],"names":["Card","state","height","sprite","abilities","id","baseexp","type","imgLoading","fetch","this","props","url","then","response","json","data","setState","sprites","front_default","base_experience","types","className","name","src","width","alt","map","num","ability","Component","SearchBox","searchChange","placeholder","onChange","Pokedata","onSearchChange","event","searchField","target","value","poke","results","filter","includes","toLowerCase","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAuDeA,G,iBAnDd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZC,OAAO,GACPC,OAAO,GACPC,UAAU,GACVC,GAAG,GACHC,QAAQ,GACRC,KAAM,GACNC,YAAa,GATF,E,wLAcNC,MAAMC,KAAKC,MAAMC,KACtBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKC,SAAS,CAAEf,OAAQc,EAAKd,SAC7B,EAAKe,SAAS,CAAEd,OAAQa,EAAKE,QAAQC,gBACrC,EAAKF,SAAS,CAAEb,UAAWY,EAAKZ,YAChC,EAAKa,SAAS,CAAEZ,GAAIW,EAAKX,KACzB,EAAKY,SAAS,CAAEX,QAASU,EAAKI,kBAC9B,EAAKH,SAAS,CAAEV,KAAMS,EAAKK,Y,gFAK5B,OACC,yBAAKC,UAAU,QACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,QACd,2BAAIZ,KAAKT,MAAMI,GAAf,KAAoB,0BAAMiB,UAAU,SAASZ,KAAKC,MAAMY,QAEpC,KAApBb,KAAKT,MAAME,OACV,yBAAKqB,IAAI,6DAA6DC,MAAM,MAAMvB,OAAO,MAAMwB,IAAI,UACjG,yBAAKF,IAAKd,KAAKT,MAAME,OAASuB,IAAI,UAEtC,yBAAKJ,UAAU,cACd,2BAAG,0BAAMA,UAAU,SAAhB,WAAH,IAA2CZ,KAAKT,MAAMC,QACtD,2BAAG,0BAAMoB,UAAU,SAAhB,cAAH,IAA8CZ,KAAKT,MAAMG,UAAUuB,KAAI,SAAAC,GAAG,gBAAOA,EAAIC,QAAQN,KAAnB,UAC1E,2BAAG,0BAAMD,UAAU,SAAhB,OAAH,IAAuCZ,KAAKT,MAAMI,IAClD,2BAAG,0BAAMiB,UAAU,SAAhB,oBAAH,IAAoDZ,KAAKT,MAAMK,SAC/D,2BAAG,0BAAMgB,UAAU,SAAhB,SAAH,IAAyCZ,KAAKT,MAAMM,KAAKoB,KAAI,SAAAC,GAAG,gBAAOA,EAAIrB,KAAKgB,KAAhB,iB,GA3CnDO,cCWJC,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,UACd,2BACCf,KAAK,SACL0B,YAAY,uBACZC,SAAUF,MCkCCG,E,YAnCd,aAAc,IAAD,8BACZ,+CAaDC,eAAiB,SAACC,GACjB,EAAKpB,SAAS,CAACqB,YAAaD,EAAME,OAAOC,SAbzC,EAAKvC,MAAQ,CACZwC,KAAM,GACNH,YAAa,IAJF,E,wLASN7B,MAAM,wDACXI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEwB,KAAMzB,EAAK0B,c,sEAOjC,IAAD,OACDC,EAASjC,KAAKT,MAAMwC,KAAKE,QAAO,SAAAf,GACrC,OAAQA,EAAIL,KAAKqB,SAAS,EAAK3C,MAAMqC,YAAYO,eAAiBjB,EAAK,QAExE,OACC,6BACC,kBAAC,EAAD,CAAWI,aAActB,KAAK0B,iBAC9B,yBAAKd,UAAU,QACbqB,EAAOhB,KAAI,SAAAC,GACX,OAAO,kBAAC,EAAD,CAAMkB,IAAKlB,EAAIL,KAAMA,KAAMK,EAAIL,KAAMX,IAAKgB,EAAIhB,e,GA5BpCkB,aCORiB,E,iLARb,OACC,6BACC,wBAAIzB,UAAU,UAAd,WACA,kBAAC,EAAD,W,GALcQ,aCSEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,iB","file":"static/js/main.283f0978.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport './card.css'\r\n\r\nclass Card extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\theight:'',\r\n\t\t\tsprite:'',\r\n\t\t\tabilities:[],\r\n\t\t\tid:'',\r\n\t\t\tbaseexp:'',\r\n\t\t\ttype: [],\r\n\t\t\timgLoading : true\r\n\t\t}\r\n\t}\r\n\r\n\tasync componentDidMount(){\r\n\t\tawait fetch(this.props.url)\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => {\r\n\t\t\tthis.setState({ height: data.height})\r\n\t\t\tthis.setState({ sprite: data.sprites.front_default})\r\n\t\t\tthis.setState({ abilities: data.abilities})\r\n\t\t\tthis.setState({ id: data.id})\r\n\t\t\tthis.setState({ baseexp: data.base_experience})\r\n\t\t\tthis.setState({ type: data.types})\r\n\t\t});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className='card'>\r\n\t\t\t\t<div className='grid'>\r\n\t\t\t\t\t<div className='head'>\r\n\t\t\t\t\t\t<p>{this.state.id}. <span className='field'>{this.props.name}</span></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{this.state.sprite==='' ? \r\n\t\t\t\t\t\t(<img src='https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif' width='100' height='100' alt='chobi'/>) \r\n\t\t\t\t\t\t: (<img src={this.state.sprite}  alt='chobi'/>)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<div className='attributes'>\r\n\t\t\t\t\t\t<p><span className='field'>height:</span> {this.state.height}</p>\r\n\t\t\t\t\t\t<p><span className='field'>abilities:</span> {this.state.abilities.map(num => `${num.ability.name}, `)}</p>\r\n\t\t\t\t\t\t<p><span className='field'>id:</span> {this.state.id}</p>\r\n\t\t\t\t\t\t<p><span className='field'>base experience:</span> {this.state.baseexp}</p>\r\n\t\t\t\t\t\t<p><span className='field'>type:</span> {this.state.type.map(num => `${num.type.name}, `)}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Card","import React from 'react';\r\nimport './card.css';\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className='search'>\r\n\t\t\t<input\r\n\t\t\t type='search'\r\n\t\t\t placeholder='Search Pokemon(Name)'\r\n\t\t\t onChange={searchChange}\r\n\t\t\t />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport Card from './card';\r\nimport SearchBox from './searchbox';\r\nimport './card.css';\r\n\r\n\r\nclass Pokedata extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tpoke: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tasync componentDidMount(){\r\n\t\tawait fetch('https://pokeapi.co/api/v2/pokemon?offset=0&limit=964')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => this.setState({ poke: data.results}));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filter = this.state.poke.filter(num => {\r\n\t\t\treturn (num.name.includes(this.state.searchField.toLowerCase()) ? num: null);\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<div className='card'>\r\n\t\t\t\t\t{filter.map(num => {\r\n\t\t\t\t\t\treturn(<Card key={num.name} name={num.name} url={num.url}/>);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\t\r\n\t}\r\n}\r\n\r\nexport default Pokedata","import React,{ Component } from 'react';\r\nimport Pokedata from './pokedata';\r\nimport './card.css';\r\nclass App extends Component {\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='header'>POKEDEX</h1>\r\n\t\t\t\t<Pokedata/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './app'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}